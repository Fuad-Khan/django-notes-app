🎓 What You'll Build

A simple Notes app with Django where users can:

View all notes

Add a new note

Edit a note

Delete a note

✅ Step 1: Install Django

pip install django

✅ Step 2: Start a New Django Project

django-admin startproject notes_project
cd notes_project

✅ Step 3: Create a Django App

python manage.py startapp notes_app

Add your app to INSTALLED_APPS in notes_project/settings.py:

INSTALLED_APPS = [
    ...,
    'notes_app',
]

✅ Step 4: Create the Note Model

In notes_app/models.py:

from django.db import models

class Note(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

Run migrations:

python manage.py makemigrations
python manage.py migrate

✅ Step 5: Set Up the Admin

In notes_app/admin.py:

from django.contrib import admin
from .models import Note

admin.site.register(Note)

Create a superuser:

python manage.py createsuperuser

Run the server:

python manage.py runserver

Visit /admin and log in to add some notes.

✅ Step 6: Create URLs and Views

In notes_app/urls.py:

from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),
    path('add/', views.add_note, name='add_note'),
    path('edit/<int:note_id>/', views.edit_note, name='edit_note'),
    path('delete/<int:note_id>/', views.delete_note, name='delete_note'),
]

Link app URLs in notes_project/urls.py:

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('notes_app.urls')),
]

✅ Step 7: Create Views

In notes_app/views.py:

from django.shortcuts import render, redirect
from .models import Note

def index(request):
    notes = Note.objects.all().order_by('-created_at')
    return render(request, 'notes_app/index.html', {'notes': notes})

def add_note(request):
    if request.method == 'POST':
        Note.objects.create(
            title=request.POST['title'],
            content=request.POST['content']
        )
        return redirect('index')
    return render(request, 'notes_app/add_note.html')

def edit_note(request, note_id):
    note = Note.objects.get(id=note_id)
    if request.method == 'POST':
        note.title = request.POST['title']
        note.content = request.POST['content']
        note.save()
        return redirect('index')
    return render(request, 'notes_app/edit_note.html', {'note': note})

def delete_note(request, note_id):
    Note.objects.get(id=note_id).delete()
    return redirect('index')

✅ Step 8: Create Templates

Folder structure:

notes_app/
├── templates/
    └── notes_app/
        ├── index.html
        ├── add_note.html
        └── edit_note.html

index.html

<h1>📒 My Notes</h1>
<a href="{% url 'add_note' %}">➕ Add Note</a>
{% for note in notes %}
    <div>
        <h3>{{ note.title }}</h3>
        <p>{{ note.content }}</p>
        <small>{{ note.created_at }}</small><br>
        <a href="{% url 'edit_note' note.id %}">✏️ Edit</a>
        <a href="{% url 'delete_note' note.id %}" onclick="return confirm('Delete this note?');">🗑️ Delete</a>
    </div>
{% empty %}
    <p>No notes found.</p>
{% endfor %}

add_note.html

<h1>➕ Add Note</h1>
<form method="POST">{% csrf_token %}
    Title: <input type="text" name="title"><br>
    Content: <textarea name="content"></textarea><br>
    <button type="submit">Save</button>
</form>
<a href="{% url 'index' %}">← Back</a>

edit_note.html

<h1>✏️ Edit Note</h1>
<form method="POST">{% csrf_token %}
    Title: <input type="text" name="title" value="{{ note.title }}"><br>
    Content: <textarea name="content">{{ note.content }}</textarea><br>
    <button type="submit">Update</button>
</form>
<a href="{% url 'index' %}">← Back</a>

✅ Step 9: Deploy to Render

Create requirements.txt:

pip freeze > requirements.txt

Install gunicorn:

pip install gunicorn

Create render.yaml with deploy config

Push to GitHub

Connect GitHub repo on render.com

